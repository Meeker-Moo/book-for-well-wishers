import { AfterViewInit, Component } from '@angular/core';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { environment } from '../../environments/environment';

@Component({
  selector: 'app-wishers',
  imports: [],
  templateUrl: './wishers.component.html',
  styleUrl: './wishers.component.scss'
})
export class WishersComponent implements AfterViewInit {

  ngAfterViewInit() {
    console.log('a');
    // this.readDataOnGoogleSheet();
    this.writeDataOnGoogleSheet();
  }

  async writeDataOnGoogleSheet() {
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: environment.Google.email,
      key: environment.Google.privateKey,
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    });

    const doc = new GoogleSpreadsheet(environment.Google.spreadSheetsId, serviceAccountAuth);

    await doc.loadInfo();
    console.log('s', doc.title);

    const sheet = doc.sheetsByTitle['Wish']; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    console.log(sheet.title);
    console.log(sheet.rowCount);
    // const sheet = await doc.addSheet({ title: 'Wish', headerValues: ['NAME', 'WISH_WORD', 'IMAGE', 'DATE'] });

    const larryRow = await sheet.addRow({ NAME: 'Test 1', WISH_WORD: 'Test 2', IMAGE: 'Test 3', DATE: 'Test 4' });

    console.log('aa', larryRow);


  }


  async readDataOnGoogleSheet() {
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: 'my-sheet-well-wishers@well-wishers-wedding.iam.gserviceaccount.com',
      key: '-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCshTYB8cxmYS1U\nzlTSvHzACgtNEwWMEzQOAjciU/nuSUHy7PCf49h97u4nw+HH0Aij0BoyWCY4iGwH\nyoahSF7ZfY2/3NOa/lQ6Z354FEn9jXyDmMuKerI0wVZg9x4wTTPldzvP9Cj8RGp4\nvOHkPMGh3B1NvnN36b9v6E2QBYFpGAlUIRpEzBbFP74okOLqyZ7gLrpl8CnJ1m0O\n5Sq13/QPtn54Wl5avT8BCIAFko4DB6O3hVTcVSg3MXNFzwP+Hk/WllX6smdr6QoH\n9B/NmWtVvpV+lXJD/y2Ug/mdwXR4KsuChbrf1dBj+aquYmIm1BSLgSQGtjVHyr+i\n+t6XOwG5AgMBAAECggEACJQegY3p/uScfJ0+nN9a3rEWgHB5M/ltJbiDewACVhCA\n0y5oBV4EO7g1UcyM6MLV+HtWdM7AUSBWKt8DFHhaSxCnYJ/U9TM/XKDH1PsWoMvi\nd1K85aJrQ8dMtHP6pXvj9ZLuak1MT8Wr0QbSFBIsrg/uycO2JIN+4vbXYIQoPAxX\npIXBww0bSG5oW1lrgTUqDTouhxBVsD+VEZzlWbyI/b5hRN8lobVFetOdXt3/HF2T\naDtgwWIY75uaw3KHAGE0JCmCTI3rDomVY4DU3p46kUOdyW06EFFaybDkqsnDV+X4\n3VZkQKkoRqjwdJq8UTK8EQ4nQNkvcF+1miSWZouCfwKBgQDzEoL1k+krTB6UVb9h\n1WaLfeeyfwO15kWinu0wnJgb7Qr+ROTjCve1Xm8dQxxMuav7A0+JsP8A1BeSebNe\noY01TPZYM3UgTzT9ougpKRIhYOnOuuiWxj2y6ie7lBWqbwK7/zb4UbEtZZkJJt6X\nKH1I2gMb0ERbRzVeSl2LU0Zl/wKBgQC1sh4P44ahP4Unv27CELZ36uTKPiGddu2N\nogz6+oj5q394JHLCFq6tHx2bEoijiASLo+08PimFsLKnJXtHSQrtyNMHhv1qlWFL\nt4aqFLzSuPG1BT3zV6z+dx1bRb7Xe3g0wAzlo6ypMA9lMfPfNrY4VtxrMVfrMDCR\nqAuxT/tIRwKBgFIQV+JtU3Vot5JA+OIg2AQUN9tNgoUw/yWOHmohFEGpX+LEg7ob\ng9HZ1g29EJrevK98SKgl95HiCStMp0A1rqTmHO1eQhbsZumSzGrJEPPv8j/3Xns4\n5q+22j88Gax22id6XKatffHjsS0j0FacNuAXqqEDSXC/s8bnuHlHXiclAoGAbFDD\nxRsRXj08xwZDI+PMs05PmBVT+sg0M5Pggxop4BURx3CLDRNyjHgZMSHqXPqwIwLV\nYW15WV6OEkCw7j0oC7sFut4JYqmst/OvjuMP8dsZFJ4MYW3qDkS6Nngsnc7YSTIY\nPinFu5KQCvateGroVEvL2Qcwb19qBNsWJV0V4u8CgYEA40h1vtAIRTkVh4pZl7xG\n44/8QL9O0XochwPan1tdrk9+vR86r5Y6ErJ58p0WgEVCTIK6CkQjEqUfxL4oJD5L\n3duth29bvSe+updI2QcoUng7T0+sDjeonmLfAcx6blWTwD259jloZPswUt3m4wrc\nZUaVN5hTYY1HQkp2yuhvE88=\n-----END PRIVATE KEY-----\n',
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    });

    const doc = new GoogleSpreadsheet(this.ggSpreadSheetsId, serviceAccountAuth);

    await doc.loadInfo();
    console.log('s', doc.title);

    const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    console.log(sheet.title);
    console.log(sheet.rowCount);

    const rows = await sheet.getRows(); // can pass in { limit, offset }
    console.log('rows', rows);
  }
}
